/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    chosen {
      zmk,battery = &vbatt;
    };

    vbatt: vbatt {
        compatible = "zmk,battery-nrf-vddh";
        label = "VBATT";
    };

    behaviors {
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        am: alpha_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "ALPHA_MT";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <125>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            retro-tap;
        };
    };
    ZMK_UNICODE_SINGLE(s_lbkt, KP_N0, KP_N0, KP_N9, KP_N1)      // [
    /* German umlauts */
        ZMK_UNICODE_PAIR(   de_ae,      N0, N0,  E, N4,    N0, N0,  C, N4)
        ZMK_UNICODE_PAIR(   de_oe,      N0, N0,  F, N6,    N0, N0,  D, N6)
        ZMK_UNICODE_PAIR(   de_ue,      N0, N0,  F,  C,    N0, N0,  D,  C)
        ZMK_UNICODE_SINGLE( de_eszett,  N0, N0,  D,  F)
    };
    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ------------------------------------------------------------------------------------------------------------
// |  <    |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   ß   |
// |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   Ü   |
// |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   Ö   |   Ä   |
// | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
//               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| GUI  | ALT   | CTRL  |
            bindings = <
&kp GRAVE &kp N1        &kp N2        &kp N3       &kp N4        &kp N5                      &kp N6 &kp N7    &kp N8    &kp N9   &kp N0   &kp MINUS
&kp ESC   &kp Q         &kp W         &kp E        &kp R         &kp T                       &kp Y  &kp U     &kp I     &kp O    &kp P    &kp LBKT
&kp TAB   &bhm LSHFT A  &bhm LCTRL S  &bhm LALT D  &bhm LGUI F   &kp  G                       &kp H  &bhm RGUI J     &bhm RALT K     &bhm RCTRL L    &kp SEMI &kp SQT
&kp LSHFT &kp Z         &kp X         &kp C        &kp V         &kp B  &kp C_MUTE &none     &kp N  &kp M     &kp COMMA &kp DOT  &kp FSLH &kp RSHFT
                 &kp LCTRL &kp LALT &kp LGUI  &kp SPACE  &lt 1 DEL     &lt 2 RET &kp BSPC  &kp RGUI  &kp RALT  &kp RCTRL
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        lower_layer {
// TODO: Some binds are waiting for shifted keycode support.
// ------------------------------------------------------------------------------------------------------------
// |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
// |  #    |   1 |   2 |   3  |   4  |   5  |                   |   6  |   7   |   8   |   9  |   0   |  F12  |
// |  @    |  !  |  "  |  §   |  $   |  %   |                   |  (   |   )   |   ^   |  &   |   *   |  |    |
// |  >    |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |   /   |
//               |     |      |      |      |        |  |       |      |       |       |      |
            bindings = <
&none    &kp F1    &kp F2    &kp F3      &kp F4    &kp F5                        &kp F6    &kp F7   &kp F8          &kp F9    &kp F10   &kp F11
&trans &kp N1    &kp N2    &kp N3      &kp N4    &kp N5                          &kp N6    &kp N7   &kp N8          &kp N9    &kp N0    &kp F12
&kp LA(L)    &kp EXCL  &kp AT    &kp HASH    &kp DLLR  &kp PRCNT                 &kp AMPS  &kp LPAR &kp GRAVE       &kp CARET &kp RBRC  &kp PIPE
&kp LSHFT    &kp RPAR &kp MINUS &kp FSLH &kp LA(N8)  &kp LA(N9)  &trans   &trans &kp LBKT  &kp RBKT &kp SEMI        &kp COLON &kp BSLH  &kp LA(LS(N5))
                      &trans    &trans   &trans      &trans      &trans   &trans &trans    &trans   &trans          &trans
            >;

            sensor-bindings = <&inc_dec_kp F11 F12 &inc_dec_kp PG_UP PG_DN>;
        };

        raise_layer {
// ------------------------------------------------------------------------------------------------------------
// |BTCLR| BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
// |     | INS  | PSCR | GUI   |       |      |                | PGUP | END  |   ^   | HOME |  INS  |      |
// |     | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   | ->   |  DEL  | BKSPC |
// |     | UNDO | CUT  | COPY  | PASTE |      |      |  |      | SCRL | PRVS | PLAY  | NEXT |       |       |
//              |      |       |       |      |      |  |      |      |      |       |      |
            bindings = <
&bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4               &none     &none      &none   &none      &none     &none
&trans     &kp INS      &kp PSCRN    &kp K_CMENU  &none       &none                     &kp PG_UP  &kp END     &kp UP   &kp HOME    &kp INS    &none  &none
&trans     &kp LALT     &kp LCTRL    &kp LSHFT    &none       &kp CLCK                   &kp PG_DN  &kp LEFT    &kp DOWN   &kp RIGHT   &kp DEL    &kp BSPC
&trans     &kp K_UNDO   &kp K_CUT    &kp K_COPY   &kp K_PASTE  &trans  &trans     &trans  &kp SLCK   &kp C_PREV  &kp C_PP &kp C_NEXT  &trans     &trans
                        &trans       &trans       &trans       &trans  &trans     &trans  &trans     &trans      &trans   &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
    };
};
// 
//
//  